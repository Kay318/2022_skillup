# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from functools import partial
from PIL import Image
from UI.ImageView import ImageViewer
from UI.excel_create import Ui_excel_create
import sys
import time
import math
import os

from pathlib import Path
sys.path.append(str(Path(__file__).parents[1]))
from Database.DB import DBManager

print(os.getcwd())

class Ui_MainWindow(QMainWindow, DBManager):
    def __init__(self):
        super().__init__()
        self.all_RadioList = []     # 모든 라디오 버튼
        self.pass_RadioList = []    # 모든 pass 버튼
        self.fail_RadioList = []    # 모든 fail 버튼
        self.nt_RadioList = []      # 모든 N/T 버튼
        self.na_RadioList = []      # 모든 N/A 버튼
        self.nl_RadioList = []      # 모든 NULL 버튼
        self.imgList = []           # 선택된 경로의 이미지 리스트
        self.pre_idx = 0            # 전에 선택했던 버튼 index
        self.idx = ""               # 좌측 이미지 버튼 index
        self.button = ""            # 좌측 이미지 버튼
        self.img_dir = ""           # 이미지 경로
        self.setupList = []         # 필드와 평가결과에 들어가는 모든 항목
        self.result = {}
        self.setupUi()
        self.clicked_lang = None

    def setupUi(self):
        self.widget = QWidget()
        self.resize(1472, 900)
        self.setWindowTitle("다국어 자동화")
        self.setWindowIcon(QIcon("web-removebg-preview.png"))

        # 전체 화면 배치
        self.horizontalLayout = QHBoxLayout(self.widget)

        # 좌측 이미지 리스트
        self.img_scrollArea = QScrollArea()
        self.img_scrollArea.setWidgetResizable(True)
        self.img_scrollArea.setFixedWidth(90)
    
        self.img_scrollAreaWidgetContents = QWidget()
        self.img_VBoxLayout = QVBoxLayout(self.img_scrollAreaWidgetContents)
        self.img_VBoxLayout.setAlignment(Qt.AlignTop)

        self.img_scrollArea.setWidget(self.img_scrollAreaWidgetContents)
        self.horizontalLayout.addWidget(self.img_scrollArea)

        # 우측 큰 이미지
        self.right_VBoxLayout = QVBoxLayout()

        img_hbox = QHBoxLayout(self)

        # 0725 {
        self.left_imgBtn = QPushButtonIcon()
        self.left_imgBtn.setText("<")
        self.left_imgBtn.setMaximumSize(50, 600)
        self.left_imgBtn.clicked.connect(partial(self.btn_onClicked, target_bool = False))

        self.right_imgBtn = QPushButtonIcon()
        self.right_imgBtn.setText(">")
        self.right_imgBtn.setMaximumSize(50, 600)
        self.right_imgBtn.clicked.connect(partial(self.btn_onClicked, target_bool = True))

        self.img_Label = QLabel()
        self.img_Label.setMinimumSize(1350, 600)
        self.img_Label.setStyleSheet("color: gray;"
                                "border-style: solid;"
                                "border-width: 1px;"
                                "border-color: #747474;"
                                "border-radius: 1px")

        img_hbox.addWidget(self.left_imgBtn)
        img_hbox.addWidget(self.img_Label)
        img_hbox.addWidget(self.right_imgBtn)
        self.right_VBoxLayout.addLayout(img_hbox) # }

        # 필드 세팅
        self.field_gridLayout = QGridLayout()
        self.set_field()

        self.right_VBoxLayout.addLayout(self.field_gridLayout)

        # 평가 목록, all pass, fail
        self.bottom_HBoxLayout = QHBoxLayout()

        self.Tgroupbox = QGroupBox("평가 목록")
        self.Tgroupbox.setMinimumWidth(1000)
        self.Tgroupbox.setFixedHeight(200)
        self.testList_Layout = QHBoxLayout()
        self.Tgroupbox.setLayout(self.testList_Layout)

        self.setWidget_func()

        self.bottom_HBoxLayout.addWidget(self.Tgroupbox)

        # ALL PASS, ALL FAIL, ALL N/T, ALL N/A
        self.all_groupbox = QGroupBox("ALL")
        self.all_groupbox.setFixedHeight(200)
        self.testAll_VBoxLayout = QVBoxLayout()
        self.allPass_RadioButton = QPushButton("ALL PASS")
        self.allFail_RadioButton = QPushButton("ALL FAIL")
        self.allNT_RadioButton = QPushButton("ALL N/T")
        self.allNA_RadioButton = QPushButton("ALL N/A")
        self.allNull_RadioButton = QPushButton("ALL NULL")
        self.testAll_VBoxLayout.addWidget(self.allPass_RadioButton)
        self.testAll_VBoxLayout.addSpacing(5)
        self.testAll_VBoxLayout.addWidget(self.allFail_RadioButton)
        self.testAll_VBoxLayout.addSpacing(5)
        self.testAll_VBoxLayout.addWidget(self.allNT_RadioButton)
        self.testAll_VBoxLayout.addSpacing(5)
        self.testAll_VBoxLayout.addWidget(self.allNA_RadioButton)
        self.testAll_VBoxLayout.addSpacing(5)
        self.testAll_VBoxLayout.addWidget(self.allNull_RadioButton)
        self.testAll_VBoxLayout.setAlignment(Qt.AlignCenter)

        self.allPass_RadioButton.clicked.connect(self.allPass_clicked)
        self.allFail_RadioButton.clicked.connect(self.allFail_clicked)
        self.allNT_RadioButton.clicked.connect(self.allNT_clicked)
        self.allNA_RadioButton.clicked.connect(self.allNA_clicked)
        self.allNull_RadioButton.clicked.connect(self.allNull_clicked)
        self.all_groupbox.setLayout(self.testAll_VBoxLayout)
        self.bottom_HBoxLayout.addWidget(self.all_groupbox)

        self.version_groupbox = QGroupBox("버전 정보")
        self.version_groupbox.setMinimumWidth(200)
        self.version_groupbox.setFixedHeight(200)
        self.version_VBoxLayout = QVBoxLayout()
        self.version_textEdit = QTextEdit()
        self.version_VBoxLayout.addWidget(self.version_textEdit)
        self.version_groupbox.setLayout(self.version_VBoxLayout)
        self.bottom_HBoxLayout.addWidget(self.version_groupbox)

        self.result_groupbox = QGroupBox("진행 상황")
        self.result_groupbox.setFixedHeight(200)
        self.result_Layout = QVBoxLayout()
        self.null_lbl = QLabel("미평가:")
        self.pass_lbl = QLabel("PASS:")
        self.fail_lbl = QLabel("FAIL:")
        self.nt_lbl = QLabel("N/T:")
        self.na_lbl = QLabel("N/A:")
        self.result_Layout.addWidget(self.null_lbl)
        self.result_Layout.addWidget(self.pass_lbl)
        self.result_Layout.addWidget(self.fail_lbl)
        self.result_Layout.addWidget(self.nt_lbl)
        self.result_Layout.addWidget(self.na_lbl)
        self.result_groupbox.setLayout(self.result_Layout)

        self.bottom_HBoxLayout.addWidget(self.result_groupbox)

        self.right_VBoxLayout.addLayout(self.bottom_HBoxLayout)
        self.horizontalLayout.addLayout(self.right_VBoxLayout)

        # 메뉴바
        self.menubar = self.menuBar()
        self.menu = self.menubar.addMenu("Menu")
        self.actionCreateExcel = QAction("Create Excel", self) # 0726
        self.menu.aboutToShow.connect(self.update_open_menu)

        self.setup = self.menubar.addMenu("Setup")
        self.actionLanguage = QAction("Language", self)
        self.actionField = QAction("Field", self)
        self.actionTest_List = QAction("Test List", self)
        self.actionExcel_Setting = QAction("Excel Setting", self)
        self.setup.addAction(self.actionLanguage)
        self.setup.addAction(self.actionField)
        self.setup.addAction(self.actionTest_List)
        self.setup.addAction(self.actionExcel_Setting)

        # 상태바
        self.statusbar = QStatusBar()
        self.setStatusBar(self.statusbar)
        self.statusbar_label = QLabel()
        self.statusbar.addPermanentWidget(self.statusbar_label)

        self.setCentralWidget(self.widget)

    def allPass_clicked(self):
        for pass_radio in self.pass_RadioList:
            pass_radio.setChecked(True)

    def allFail_clicked(self):
        for fail_radio in self.fail_RadioList:
            fail_radio.setChecked(True)

    def allNT_clicked(self):
        for nt_radio in self.nt_RadioList:
            nt_radio.setChecked(True)

    def allNA_clicked(self):
        for na_Radio in self.na_RadioList:
            na_Radio.setChecked(True)

    def allNull_clicked(self):
        for nl_radio in self.nl_RadioList:
            nl_radio.setChecked(True)

    def get_db_setting(self, table, column):

        self.c.execute(f"SELECT {column} FROM {table}")
        List = self.c.fetchall()

        result = []
        for i in List:
            name = str(i)
            name = name[2 : name.find(",")- 1]

            result.append(name)

        return result

    def DBManager_Test_List(self):

        self.c.execute(f"SELECT 평가목록 FROM Test_List")
        List = self.c.fetchall()

        result = []
        for i in List:
            name = str(i)
            name = name[2 : name.find(",")- 1]
            result.append(name)

        return result

    def setWidget_func(self):
        self.pass_RadioList.clear()
        self.fail_RadioList.clear()
        self.nt_RadioList.clear()
        self.na_RadioList.clear()
        self.nl_RadioList.clear()
        self.all_RadioList.clear()

        self.testList = list(self.DBManager_Test_List())

        if len(self.testList) != 0:
            
            for i in range(self.testList_Layout.count()):
                self.testList_Layout.itemAt(i).widget().deleteLater()

            for i,val in enumerate(self.testList):

                val = str(val)
                globals()[f'testList_groupbox_{i}'] = QGroupBox(val)
                globals()[f'testList_groupbox_{i}'].setMinimumSize(80, 125)

                testList_lay = QVBoxLayout()

                globals()[f'gb{i}_pass'] = QRadioButton("PASS")
                globals()[f'gb{i}_fail'] = QRadioButton("FAIL")
                globals()[f'gb{i}_nt'] = QRadioButton("N/T")
                globals()[f'gb{i}_na'] = QRadioButton("N/A")
                globals()[f'gb{i}_nl'] = QRadioButton("NULL")
                globals()[f'gb{i}_nl'].setChecked(True)

                results = [globals()[f'gb{i}_pass'], globals()[f'gb{i}_fail'], globals()[f'gb{i}_nt'], globals()[f'gb{i}_na'], globals()[f'gb{i}_nl']]

                self.pass_RadioList.append(globals()[f'gb{i}_pass'])
                self.fail_RadioList.append(globals()[f'gb{i}_fail'])
                self.nt_RadioList.append(globals()[f'gb{i}_nt'])
                self.na_RadioList.append(globals()[f'gb{i}_na'])
                self.nl_RadioList.append(globals()[f'gb{i}_nl'])
                self.all_RadioList = self.pass_RadioList + self.fail_RadioList\
                                   + self.nt_RadioList + self.na_RadioList + self.nl_RadioList

                # 평가 목록 그룹 자녀 생성
                for result in results:
                    testList_lay.addWidget(result)

                globals()[f'testList_groupbox_{i}'].setLayout(testList_lay)

                self.testList_Layout.addWidget(globals()[f'testList_groupbox_{i}'])
                self.testList_Layout.setAlignment(Qt.AlignLeft)

    def update_open_menu(self):
        self.menu.clear()
        self.menuOpen = self.menu.addMenu("Open")
        self.c.execute('SELECT * FROM Setup_Language')
        langList = self.c.fetchall()
    
        for lang in langList:
            subMenu = QAction(lang[0], self)
            subMenu.triggered.connect(partial(self.show_imgList, lang))
            
            subMenu.setCheckable(True)
            if (self.clicked_lang == subMenu.text()):
                subMenu.setChecked(True)
            else:
                subMenu.setChecked(False)

            self.menuOpen.addAction(subMenu)
                
        self.menu.addMenu(self.menuOpen)

        self.actionSave = QAction("Save", self)
        self.actionSave.setShortcut("Ctrl+S")
        # if self.imgList == []:
        #     self.actionSave.setEnable(False)
        # else:
        #     self.actionSave.setEnable(True)
        self.actionSave.triggered.connect(self.save_result)

        self.actionClose = QAction("Close", self)
        self.menu.addAction(self.actionSave)
        self.menu.addAction(self.actionCreateExcel)
        self.menu.addAction(self.actionClose)
        self.actionClose.triggered.connect(self.closeEvent) # close이벤트

    def save_result(self):
        # self.result에 값 저장하고 기존 데이타 삭제하기
        result_data = self.insert_result()
        self.result[self.idx] = result_data

        query = f"CREATE TABLE IF NOT EXISTS '{self.clicked_lang}' ('이미지' TEXT,"
        for i, col in enumerate(self.setupList):
            if i != len(self.setupList) - 1:
                query += f"'{col}' TEXT,"
            else:
                query += f"'{col}' TEXT)"
        
        self.c.execute(query)

        self.c.execute(f"DELETE FROM {self.clicked_lang}")
        for i in self.result:
            try:
                self.dbConn.execute(f"INSERT INTO Setup_Language VALUES (?, ?)", 
                        (globals()[f'lang_lineEdit{i}'].text(), globals()[f'dir_lineEdit{i}'].text()))
                self.dbConn.commit()
            except RuntimeError:
                continue

        print(self.result)

    # 0726
    def qbutton_clicked(self, state, idx, button):

        def set_color():
            clear_result_color = """border-style: solid;
                    border-width: 1px;
                    border-color: #C0C0C0;
                    border-radius: 1px
                    """

            result_color = """border-style: solid;
                border-width: 3px;
                border-color: #9370DB;
                border-radius: 3px
                """

            self.qbuttons[self.pre_idx].setStyleSheet(
                clear_result_color)
            button.setStyleSheet(result_color)    

            result_count = {
                'pre_idx':[],
                'idx':[]
            }
            # 이전 버튼에 대한 색상 처리
            for i in self.testList:
                result_count['pre_idx'].append(self.result[self.pre_idx][i])
                result_count['idx'].append(self.result[self.idx][i])

            if len(self.testList) == result_count['pre_idx'].count('PASS'):
                self.qbuttons[self.pre_idx].setStyleSheet("background-color: #0000FF") # 블루

            elif len(self.testList) == result_count['pre_idx'].count('FAIL'):
                self.qbuttons[self.pre_idx].setStyleSheet("background-color: #FF0000") # 레드

            elif len(self.testList) == result_count['pre_idx'].count('N/A'):
                self.qbuttons[self.pre_idx].setStyleSheet("background-color: #808080") # 그레이

            elif len(self.testList) == result_count['pre_idx'].count('N/T'):
                self.qbuttons[self.pre_idx].setStyleSheet("background-color: #7FFFD4") # 민트

            elif len(self.testList) == str(self.result[self.pre_idx]).count('NULL'):
                self.qbuttons[self.pre_idx].setStyleSheet("") # 초기화

            elif result_count['pre_idx'].count('PASS') > 0 or result_count['pre_idx'].count('FAIL') or result_count['pre_idx'].count('N/T') > 0 or result_count['pre_idx'].count('N/A') > 0:
                self.qbuttons[self.pre_idx].setStyleSheet("background-color: #FFFF00") # 노랑

            # 현재 버튼에 대한 색상 처리
            if len(self.testList) == result_count['idx'].count('PASS'):
                button.setStyleSheet("background-color: #0000FF;" + result_color) # 블루

            elif len(self.testList) == result_count['idx'].count('FAIL'):
                button.setStyleSheet("background-color: #FF0000;" + result_color) # 레드

            elif len(self.testList) == result_count['idx'].count('N/A'):
                button.setStyleSheet("background-color: #808080;" + result_color) # 그레이

            elif len(self.testList) == result_count['idx'].count('N/T'):
                button.setStyleSheet("background-color: #7FFFD4;" + result_color) # 민트

            elif len(self.testList) == result_count['idx'].count('NULL'):
                button.setStyleSheet("") # 초기화

            elif result_count['idx'].count('PASS') > 0 or result_count['idx'].count('FAIL') or result_count['idx'].count('N/T') > 0 or result_count['idx'].count('N/A') > 0:
                button.setStyleSheet("background-color: #FFFF00;" + result_color) # 노랑

        self.idx = idx
        self.button = button

        self.statusbar_label.setText(self.imgList[idx])

        print(f"self.img_dir[0] : {self.img_dir}")
        self.img_dir = self.img_dirList[0] + '\\' + self.imgList[idx]
        pixmap = QPixmap(self.img_dir)
        self.img = Image.open(self.img_dir)

        self.img_Label.resize(self.img.width, self.img.height)

        if self.img.width < self.img_Label.width() and self.img.height < self.img_Label.height():
            pass
        elif self.img.width/self.img.height < self.img_Label.width()/self.img_Label.height():
            pixmap = pixmap.scaledToHeight(self.img_Label.height())
        else:
            pixmap = pixmap.scaledToWidth(self.img_Label.width())
        self.img_Label.setPixmap(QPixmap(pixmap))
        self.img_Label.setAlignment(Qt.AlignCenter)

        self.img_Label.mouseDoubleClickEvent = partial(self.double_click_img, self.img_dir)

        # 다른 이미지 버튼 누를 때 액션
        if self.pre_idx != idx:
            # self.result에 값 저장하고 기존 데이타 삭제하기
            result_data = self.insert_result(option=True)
            self.result[self.pre_idx] = result_data
            
            print(self.result)
            # self.result에 기존 평가 data로 세팅
            for i,data in enumerate(self.testList):
                if self.result[idx][data] == 'PASS':
                    globals()[f'gb{i}_pass'].setChecked(True)
                elif self.result[idx][data] == 'FAIL':
                    globals()[f'gb{i}_fail'].setChecked(True)
                elif self.result[idx][data] == 'N/T':
                    globals()[f'gb{i}_nt'].setChecked(True)
                elif self.result[idx][data] == 'N/A':
                    globals()[f'gb{i}_na'].setChecked(True)
                else:
                    globals()[f'gb{i}_nl'].setChecked(True)

            for i,data in enumerate(self.fieldList):
                globals()[f'desc_LineEdit{i}'].setText(self.result[idx][data])

        set_color()
        
        self.pre_idx = idx

    def insert_result(self, option=None):
        """dict에 평가결과 저장하는 함수

        Args:
            option : True 선택 시 화면에 입력되어 있는 데이터 clear

        Returns:
            result_data: 현재 화면에 입력되어 있는 데이터 반환
        """
        result_data = {}
        result_data["이미지"] = self.img_dir

        for i,val in enumerate(self.testList):
            if globals()[f'gb{i}_pass'].isChecked():
                result_data[val] = "PASS"
            elif globals()[f'gb{i}_fail'].isChecked():
                result_data[val] = "FAIL"
            elif globals()[f'gb{i}_nt'].isChecked():
                result_data[val] = "N/T"
            elif globals()[f'gb{i}_na'].isChecked():
                result_data[val] = "N/A"
            else:
                result_data[val] = ""

            if option is True:
                globals()[f'gb{i}_nl'].setChecked(True)

        for i,field in enumerate(self.fieldList):
            result_data[field] = globals()[f'desc_LineEdit{i}'].text()
            # result_data.append(field_data)
            if option is True:
                globals()[f'desc_LineEdit{i}'].clear()

        result_data["버전 정보"] = self.version_textEdit.toPlainText()
        return result_data

    def double_click_img(self, img_dir, e):
        self.viewer = ImageViewer(img_dir)
        self.viewer.show()

    def show_imgList(self, lang):
        """좌측에 표출할 이미지버튼들을 세팅할 함수

        Args:
            lang : 현재 선택된 언어
        """
        # 선택한 언어 기억
        self.clicked_lang = lang[0]

        # 평가결과 기록 삭제
        self.result.clear()

        self.setupList = self.testList + self.fieldList

        # 레이블 초기화
        # for i,field in enumerate(self.fieldList):
        #         field_data = {field[0]:globals()[f'desc_LineEdit{i}'].text()}
        #         self.result[self.pre_idx].append(field_data)
        #         globals()[f'desc_LineEdit{i}'].clear()

        # 이미지 리스트 초기화
        for i in range(self.img_VBoxLayout.count()):
            self.img_VBoxLayout.itemAt(i).widget().deleteLater()

        # 이미지 경로 불러옴
        self.c.execute("SELECT 경로 FROM Setup_Language WHERE 언어=?", (lang[0],))
        self.img_dirList = self.c.fetchone()

        try:
            self.imgList = [fn for fn in os.listdir(self.img_dirList[0])
                    if (fn.endswith('.png') or fn.endswith('.jpg'))]
        except FileNotFoundError:
            QMessageBox.warning(self, "주의", "존재하지 않는 경로입니다.")
            return

        if self.imgList == []:
            QMessageBox.warning(self, "주의", "선택하신 경로에 이미지 파일이 없습니다.")
        else:
            # 이미지 버튼 추가
            self.qbuttons = {}
            self.icons = {}
            for index, filename in enumerate(self.imgList):
                # 평가결과를 저장할 dictionary: self.result 세팅
                self.result[index] = {}
                self.result[index]['이미지'] = ""
                for i in self.setupList:
                    self.result[index][i] = ""
                self.result[index]['버전 정보'] = ""

                pixmap = QPixmap(self.img_dirList[0] + '\\' + filename)
                pixmap = pixmap.scaled(40, 40, Qt.IgnoreAspectRatio)
                icon = QIcon()
                icon.addPixmap(pixmap)
                self.icons[index] = icon

            for index, icon in self.icons.items():
                button = QPushButtonIcon()
                button.setIcon(icon)
                button.clicked.connect(lambda state, button = button, idx = index :
                            self.qbutton_clicked(state, idx, button))
                self.img_VBoxLayout.addWidget(button)
                self.qbuttons[index] = button

            print(self.result)
            self.qbuttons[0].click()
            self.horizontalLayout.addLayout(self.img_VBoxLayout)

    def set_field(self):
        try:
            self.fieldList = list(self.get_db_setting("Setup_Field", "Excel_Field"))

            for i,field in enumerate(self.fieldList):
                if i%2==0:
                    globals()[f'field_Label{i}'] = QLabel(field)
                    self.field_gridLayout.addWidget(globals()[f'field_Label{i}'], 0,i)
                    globals()[f'desc_LineEdit{i}'] = QLineEdit()
                    self.field_gridLayout.addWidget(globals()[f'desc_LineEdit{i}'], 0,i+1)
                else:
                    globals()[f'field_Label{i}'] = QLabel(field)
                    self.field_gridLayout.addWidget(globals()[f'field_Label{i}'], 1,i-1)
                    globals()[f'desc_LineEdit{i}'] = QLineEdit()
                    self.field_gridLayout.addWidget(globals()[f'desc_LineEdit{i}'], 1,i)
        except:
            pass
    
    def btn_onClicked(self, target_bool):
        
        if (len(self.imgList) != 0) :
            self.left_imgBtn.setEnabled(True)
            self.right_imgBtn.setEnabled(True)
            print(f"x : {self.idx}")
            if (target_bool):
                self.idx = self.idx + 1
            else:
                self.idx = self.idx - 1
            if (self.idx <= 0):
                self.idx = 0
                self.left_imgBtn.setEnabled(False)
            elif (self.idx >= len(self.qbuttons) - 1):
                self.idx = len(self.qbuttons) - 1
                self.right_imgBtn.setEnabled(False)
            print(f"y : {self.idx}")
            self.qbutton_clicked(state=None, idx = self.idx, button=self.qbuttons.get(self.idx))

    def closeEvent(self, event) -> None: # a0: QtGui.QCloseEvent
        sys.exit()

class QPushButtonIcon(QPushButton):
    def __init__(self, parent = None):
        super().__init__(parent)
        self.setIconSize(QSize(40, 40))

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec_())
