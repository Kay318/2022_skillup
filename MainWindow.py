# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from functools import partial
import traceback
from PIL import Image
import sys
import os
from SubWindow.ImageView import ImageViewer
from SubWindow.Setup_Language import Setup_Language
from SubWindow.Setup_Field import Setup_Field
from SubWindow.Setup_TestList import Setup_TestList
from SubWindow.Setup_ExcelSetting import Setup_ExcelSetting
from SubWindow.Menu_CreateExcel import UI_CreateExcel
from Helper import *
from DataBase import DB as db
from Log import LogManager
from Settings import Setup as sp

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.field_lineEdit = []                 # 모든 필드
        self.all_RadioList = []                  # 모든 라디오 버튼
        self.pass_RadioList = []                 # 모든 pass 버튼
        self.fail_RadioList = []                 # 모든 fail 버튼
        self.nt_RadioList = []                   # 모든 N/T 버튼
        self.na_RadioList = []                   # 모든 N/A 버튼
        self.nl_RadioList = []                   # 모든 NULL 버튼
        self.imgList = []                        # 선택된 경로의 이미지 리스트
        self.pre_imgList = []                    # 이전 경로에서 선택된 이미지 리스트
        self.idx = ""                            # 좌측 이미지 버튼 index
        self.button = ""                         # 좌측 이미지 버튼
        self.img_dir = ""                        # 이미지 경로
        self.setupList = []                      # 필드와 평가결과에 들어가는 모든 항목
        self.result = {}                         # 매 이미지에 대한 결과값 저장
        self.clicked_lang = ""                   # 선택된 언어
        self.pre_lang = ""                       # 그전에 선택된 언어
        self.pre_langPath = ""                   # 그전에 선택된 언어
        self.pre_subMenu = None                  # 메뉴바에서 그전에 선택된 언어 subMenu
        self.nextImg_bool = True                 # 다음 이미지로 넘어갈지 판단
        self.first_index_in_sql = None           # DB에 첫번째 이미지 결과가 있는지 판단
        self.save_result_no = None               # 평가결과 저장 안함 버튼
        self.sp = sp.Settings()
        # self.db = db.DBManager()
        self.setupUi()
        
    @AutomationFunctionDecorator
    def setupUi(self):
        widget = QWidget()

        # 해상도 받아옴
        screen = QDesktopWidget().screenGeometry()

        # 해상도에 따라 창 크기 설정
        main_width = round(screen.width() * 0.7)                   # 메인창 넓이
        main_height = round(screen.height() * 0.7)                 # 메인창 높이
        main_left = round((screen.width() - main_width) / 2)       # 메인창 x좌표
        main_top = round((screen.height() - main_height) / 2)      # 메인창 y좌표
        img_scrollArea_width = round(main_width / 15)              # 좌측 이미지 스크롤 영역 넓이
        left_right_imgBtn_width = round(main_width / 20)           # [<], [>] 버튼 넓이
        allButton_spacing = 10                              # all 버튼 간격
        self.bottom_groupbox_fixedHeight = 210                   # bottom 영역 높이값

        if main_width > 1344:
            main_width = 1344
        if main_height > 756:
            main_height = 756

        self.setMinimumSize(main_width, main_height)
        self.setGeometry(main_left, main_top, main_width, main_height)
        self.setWindowTitle("다국어 자동화")

        # 전체 화면 배치
        horizontalLayout = QHBoxLayout(widget)
        self.setCentralWidget(widget)

        # 좌측 이미지 리스트
        img_scrollArea = QScrollArea()
        img_scrollArea.setWidgetResizable(True)
        img_scrollArea.setFixedWidth(img_scrollArea_width)
    
        img_scrollAreaWidgetContents = QWidget()
        self.img_VBoxLayout = QVBoxLayout(img_scrollAreaWidgetContents)
        self.img_VBoxLayout.setAlignment(Qt.AlignTop)

        img_scrollArea.setWidget(img_scrollAreaWidgetContents)
        horizontalLayout.addWidget(img_scrollArea)

        # 우측 큰 이미지
        right_VBoxLayout = QVBoxLayout()
        img_hbox = QHBoxLayout(self)

        self.left_imgBtn = QPushButton("<")
        self.left_imgBtn.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        self.left_imgBtn.setFixedWidth(left_right_imgBtn_width)
        self.left_imgBtn.setShortcut('Alt+left')
        self.left_imgBtn.clicked.connect(partial(self.btn_onClicked))
        self.left_imgBtn.setEnabled(False)

        self.right_imgBtn = QPushButton(">")
        self.right_imgBtn.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        self.right_imgBtn.setFixedWidth(left_right_imgBtn_width)
        self.right_imgBtn.setShortcut('Alt+right')
        self.right_imgBtn.clicked.connect(partial(self.btn_onClicked))
        self.right_imgBtn.setEnabled(False)

        self.img_Label = QLabel()
        self.img_Label.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        self.img_Label.setStyleSheet("color: gray;"
                                "border-style: solid;"
                                "border-width: 1px;"
                                "border-color: #747474;"
                                "border-radius: 1px")

        img_hbox.addWidget(self.left_imgBtn)
        img_hbox.addWidget(self.img_Label)
        img_hbox.addWidget(self.right_imgBtn)
        right_VBoxLayout.addLayout(img_hbox)

        # 필드 세팅
        self.field_gridLayout = QGridLayout()
        self.fieldList, _ = self.sp.read_setup(table = "Field")
        self.set_field_gridLayout()
        right_VBoxLayout.addLayout(self.field_gridLayout)

        # 평가 목록, all pass, fail      
        self.bottom_gridLayout = QGridLayout()
        self.testList, _ = self.sp.read_setup(table = "Test_List")
        self.set_testList_hboxLayout()

        # ALL PASS, ALL FAIL, ALL N/T, ALL N/A
        all_groupbox = QGroupBox("ALL")
        all_groupbox.setFixedHeight(self.bottom_groupbox_fixedHeight)
                
        testAll_VBoxLayout = QVBoxLayout()
        self.allPass_RadioButton = QPushButton("ALL PASS")
        self.allPass_RadioButton.setStyleSheet("background-color: #0072b2; color:white;")
        self.allPass_RadioButton.setEnabled(False)
        self.allFail_RadioButton = QPushButton("ALL FAIL")
        self.allFail_RadioButton.setStyleSheet("background-color: rgb(211,44,98); color:white;")
        self.allFail_RadioButton.setEnabled(False)
        self.allNT_RadioButton = QPushButton("ALL N/T")
        self.allNT_RadioButton.setStyleSheet("background-color: #009e73; color:white;")
        self.allNT_RadioButton.setEnabled(False)
        self.allNA_RadioButton = QPushButton("ALL N/A")
        self.allNA_RadioButton.setStyleSheet("background-color: #e69f00; color:white;")
        self.allNA_RadioButton.setEnabled(False)
        self.allNull_RadioButton = QPushButton("ALL NULL")
        self.allNull_RadioButton.setEnabled(False)
        testAll_VBoxLayout.addWidget(self.allPass_RadioButton)
        testAll_VBoxLayout.addSpacing(allButton_spacing)
        testAll_VBoxLayout.addWidget(self.allFail_RadioButton)
        testAll_VBoxLayout.addSpacing(allButton_spacing)
        testAll_VBoxLayout.addWidget(self.allNT_RadioButton)
        testAll_VBoxLayout.addSpacing(allButton_spacing)
        testAll_VBoxLayout.addWidget(self.allNA_RadioButton)
        testAll_VBoxLayout.addSpacing(allButton_spacing)
        testAll_VBoxLayout.addWidget(self.allNull_RadioButton)
        testAll_VBoxLayout.setAlignment(Qt.AlignCenter)

        self.allPass_RadioButton.clicked.connect(self.__allPass_clicked)
        self.allFail_RadioButton.clicked.connect(self.__allFail_clicked)
        self.allNT_RadioButton.clicked.connect(self.__allNT_clicked)
        self.allNA_RadioButton.clicked.connect(self.__allNA_clicked)
        self.allNull_RadioButton.clicked.connect(self.__allNull_clicked)
        all_groupbox.setLayout(testAll_VBoxLayout)
        self.bottom_gridLayout.addWidget(all_groupbox, 0, 4, 1, 1)

        # 버전 정보
        version_groupbox = QGroupBox("버전 정보")
        version_groupbox.setFixedHeight(self.bottom_groupbox_fixedHeight)
        version_VBoxLayout = QVBoxLayout()
        self.version_textEdit = QTextEdit()
        self.version_textEdit.setEnabled(False)
        version_VBoxLayout.addWidget(self.version_textEdit)
        version_groupbox.setLayout(version_VBoxLayout)
        self.bottom_gridLayout.addWidget(version_groupbox, 0, 5, 1, 3)

        # 진행 상황
        result_groupbox = QGroupBox("진행 상황")
        result_groupbox.setFixedHeight(self.bottom_groupbox_fixedHeight)
        result_Layout = QGridLayout()
        self.all_lbl = QLabel("전체/진행율:")
        self.all_lbl_cnt = QLabel("0건/0%")
        self.all_lbl.setFont(QFont("", weight=QFont.Bold))
        self.all_lbl_cnt.setFont(QFont("", weight=QFont.Bold))
        self.null_lbl = QLabel("미평가:")
        self.null_lbl_cnt = QLabel("0건")
        self.pass_lbl = QLabel("ALL PASS:")
        self.pass_lbl_cnt = QLabel("0건")
        self.fail_lbl = QLabel("ALL FAIL:")
        self.fail_lbl_cnt = QLabel("0건")
        self.nt_lbl = QLabel("ALL N/T:")
        self.nt_lbl_cnt = QLabel("0건")
        self.na_lbl = QLabel("ALL N/A:")
        self.na_lbl_cnt = QLabel("0건")
        self.other_lbl = QLabel("Other:")
        self.other_lbl_cnt = QLabel("0건")
        result_Layout.addWidget(self.all_lbl, 0, 0)
        result_Layout.addWidget(self.all_lbl_cnt, 0, 1)
        result_Layout.addWidget(self.null_lbl)
        result_Layout.addWidget(self.null_lbl_cnt)
        result_Layout.addWidget(self.pass_lbl)
        result_Layout.addWidget(self.pass_lbl_cnt)
        result_Layout.addWidget(self.fail_lbl)
        result_Layout.addWidget(self.fail_lbl_cnt)
        result_Layout.addWidget(self.nt_lbl)
        result_Layout.addWidget(self.nt_lbl_cnt)
        result_Layout.addWidget(self.na_lbl)
        result_Layout.addWidget(self.na_lbl_cnt)
        result_Layout.addWidget(self.other_lbl)
        result_Layout.addWidget(self.other_lbl_cnt)
        result_groupbox.setLayout(result_Layout)

        self.bottom_gridLayout.addWidget(result_groupbox, 0, 8, 1, 1)

        right_VBoxLayout.addLayout(self.bottom_gridLayout)
        horizontalLayout.addLayout(right_VBoxLayout)

        # 메뉴바
        self.menubar = self.menuBar()
        self.menu = self.menubar.addMenu("&Menu")
        self.actionNewProject = QAction("New Project", self)
        self.actionNewProject.setShortcut("Ctrl+N")
        self.actionNewProject.triggered.connect(self.remove_db)
        self.menuOpen = self.menu.addMenu("Open")
        langList, langPath = self.sp.read_setup(table = "Language")
        for lang, path in zip(langList, langPath):
            subMenu = QAction(lang, self)
            self.menuOpen.addAction(subMenu)
            subMenu.setCheckable(True)
            subMenu.triggered.connect(partial(self.show_imgList, lang, path, subMenu))
            
        self.actionSave = QAction("Save", self)
        self.actionSave.setShortcut("Ctrl+S")
        self.actionCreateExcel = QAction("Create Excel", self)
        self.actionCreateExcel.setShortcut("Ctrl+E")
        self.menu.addAction(self.actionNewProject)
        self.menu.addMenu(self.menuOpen)
        self.menu.addAction(self.actionSave)
        self.menu.addAction(self.actionCreateExcel)
        self.actionCreateExcel.triggered.connect(self.show_menu_CreateExcel)
        self.actionSave.triggered.connect(self.save_result)
        self.actionSave.setEnabled(False)

        self.setup = self.menubar.addMenu("&Setup")
        self.actionLanguage = QAction("Language", self)
        self.actionField = QAction("Field", self)
        self.actionTest_List = QAction("Test List", self)
        self.actionExcel_Setting = QAction("Excel Setting", self)
        self.actionLanguage.setShortcut("Ctrl+1")
        self.actionField.setShortcut("Ctrl+2")
        self.actionTest_List.setShortcut("Ctrl+3")
        self.actionExcel_Setting.setShortcut("Ctrl+4")
        self.setup.addAction(self.actionLanguage)
        self.setup.addAction(self.actionField)
        self.setup.addAction(self.actionTest_List)
        self.setup.addAction(self.actionExcel_Setting)
        self.actionLanguage.triggered.connect(self.show_setup_Language)
        self.actionField.triggered.connect(self.show_setup_Field)
        self.actionTest_List.triggered.connect(self.show_setup_TestList)
        self.actionExcel_Setting.triggered.connect(self.show_setup_ExcelSetting) # updateList
        
        # 상태바
        statusbar = QStatusBar()
        self.setStatusBar(statusbar)
        self.statusbar_label = QLabel()
        statusbar.addPermanentWidget(self.statusbar_label)
    
    # @AutomationFunctionDecorator
    # def __ce_ui(self, litter):
    #     CE = UI_CreateExcel(MainWindow())
    #     CE.setupUI_CreateExcel()
    #     CE.langSetting()
    #     CE.show()

    def remove_db(self):
        # self.db = db.DBManager()
        if db.find_db():
            reply = QMessageBox.question(self, '알림', '이전에 저장한 결과가 전부 삭제됩니다.\n계속하시겠습니까?',
                                QMessageBox.Ok | QMessageBox.No, QMessageBox.Ok)
            if reply == QMessageBox.Ok:
                # self.db.close()
                # self.db.remove_db()
                db.remove_db()

    @AutomationFunctionDecorator
    def show_menu_CreateExcel(self, litter=None):
        self.setEnabled(False)
        ce = UI_CreateExcel()
        ce.signal.connect(self.ce_emit)
        ce.show()
        LogManager.HLOG.info(f"엑셀 생성 팝업 열림")

    @AutomationFunctionDecorator
    def show_setup_Language(self, litter=None):
        self.setEnabled(False)
        sl = Setup_Language(self)
        sl.signal.connect(self.sl_emit)
        sl.show()
        LogManager.HLOG.info(f"언어 설정 팝업 열림")

    @AutomationFunctionDecorator
    def show_setup_Field(self, litter):
        self.setEnabled(False)
        # self.db.close()
        sf = Setup_Field(self)
        sf.signal.connect(self.sf_emit)
        sf.show()
        LogManager.HLOG.info("필드 설정 팝업 열림")
    
    @AutomationFunctionDecorator
    def show_setup_TestList(self, litter):
        self.setEnabled(False)
        # self.db.close()
        tl = Setup_TestList(self)
        tl.signal.connect(self.tl_emit)
        tl.show()
        LogManager.HLOG.info("평가 목록 설정 팝업 열림")

    @AutomationFunctionDecorator
    def show_setup_ExcelSetting(self, litter): # updateList
        self.setEnabled(False)
        ts = Setup_ExcelSetting(self)
        ts.signal.connect(self.ts_emit)
        ts.show()
        LogManager.HLOG.info("엑셀 설정 팝업 열림")

    def ce_emit(self):
        self.setEnabled(True)
        LogManager.HLOG.info("엑셀 생성 팝업 닫힘으로 메인창 활성화")

    def sl_emit(self, langPath):
        if langPath != []:
            self.menuOpen.clear()
            LogManager.HLOG.info("퀵메뉴 clear")
            langList, langPath = self.sp.read_setup(table = "Language")
            for lang, path in zip(langList, langPath):
                subMenu = QAction(lang, self)
                self.menuOpen.addAction(subMenu)
                subMenu.setCheckable(True)
                subMenu.triggered.connect(partial(self.show_imgList, lang, path, subMenu))
                if subMenu.text() == self.clicked_lang:
                    subMenu.setChecked(True)
                    self.pre_subMenu = subMenu
                
            LogManager.HLOG.info("퀵메뉴 갱신 완료")
        self.setEnabled(True)
        LogManager.HLOG.info("언어 설정 팝업 닫힘으로 메인창 활성화")

    def sf_emit(self, fieldList, newColumns):
        if fieldList != []:
            if self.result != {}:
                result_data = self.insert_result()
                self.result[self.idx] = result_data

            for i in range(self.field_gridLayout.count()):
                self.field_gridLayout.itemAt(i).widget().deleteLater()

            if fieldList != ["OK"]:
                self.fieldList = fieldList
                self.set_field_gridLayout()
                LogManager.HLOG.info("필드리스트 갱신 완료")
        
            # self.reuslt의 값을 변경된 필드에 맞게 변경
            if self.result != {}:
                new_result = {}
                for i, val in self.result.items():
                    new_result[i] = {}
                    for key in newColumns:
                        try:
                            new_result[i][key] = val[key]
                        except KeyError:
                            new_result[i][key] = ""
            
                self.result = new_result
        self.setEnabled(True)
        LogManager.HLOG.info("필드 설정 팝업 닫힘으로 메인창 활성화")

    def tl_emit(self, testList, newColumns):
        if testList != []:
            if self.result != {}:
                result_data = self.insert_result()
                self.result[self.idx] = result_data

            for i in range(self.testList_groupbox_layout.count()):
                self.testList_groupbox_layout.itemAt(i).widget().deleteLater()
            if testList != ["OK"]:
                self.testList = testList
                LogManager.HLOG.info("기존 평가 목록 삭제")
                self.set_testList_hboxLayout()
                LogManager.HLOG.info("평가 목록 갱신 완료")

            # self.reuslt의 값을 변경된 평가 목록에 맞게 변경
            if self.result != {}:
                new_result = {}
                for i, val in self.result.items():
                    cnt_result = []
                    new_result[i] = {}
                    for key in newColumns:
                        try:
                            new_result[i][key] = val[key]
                        except KeyError:
                            new_result[i][key] = ""
                        
                        if key in self.testList:
                            cnt_result.append(new_result[i][key])
                            
                    if len(self.testList) == cnt_result.count("PASS"):
                        self.qbuttons[i].setStyleSheet("background-color: #0072b2") # 블루
                    elif len(self.testList) == cnt_result.count('FAIL'):
                        self.qbuttons[i].setStyleSheet("background-color: rgb(211,44,98);") # 레드
                    elif len(self.testList) == cnt_result.count('N/A'):
                        self.qbuttons[i].setStyleSheet("background-color: #e69f00") # 그레이
                    elif len(self.testList) == cnt_result.count('N/T'):
                        self.qbuttons[i].setStyleSheet("background-color: #009e73") # 민트
                    elif (cnt_result.count("PASS") > 0 or cnt_result.count('FAIL') > 0 or\
                        cnt_result.count('N/A') > 0 or cnt_result.count('N/T') > 0) and cnt_result.count('') == 0:
                        self.qbuttons[i].setStyleSheet("background-color: #f0e442") # 노랑 
                    else:
                        self.qbuttons[i].setStyleSheet("")
            
                self.result = new_result
                refreshed_cnt = Calculator(self)
                refreshed_cnt.start()
                self.qbuttons[self.idx].setStyleSheet("background-color:#cc79a7;")  # 보라색

        self.setEnabled(True)
        LogManager.HLOG.info("평가 목록 설정 팝업 닫힘으로 메인창 활성화")

    def ts_emit(self): # updateList
        self.setEnabled(True)
        LogManager.HLOG.info("엑셀 설정 팝업 닫힘으로 메인창 활성화")
        
    @AutomationFunctionDecorator
    def __allPass_clicked(self, litter):
        for idx, pass_radio in enumerate(self.pass_RadioList):
            if idx != len(self.pass_RadioList)-1:
                self.nextImg_bool = False
            else:
                self.nextImg_bool = True
            pass_radio.click()
        try:
            self.qbuttons[self.idx+1].click()
        except KeyError:
            pass

    @AutomationFunctionDecorator
    def __allFail_clicked(self, litter):
        for idx, fail_radio in enumerate(self.fail_RadioList):
            if idx != len(self.pass_RadioList)-1:
                self.nextImg_bool = False
            else:
                self.nextImg_bool = True
            fail_radio.click()
        try:
            self.qbuttons[self.idx+1].click()
        except KeyError:
            pass

    @AutomationFunctionDecorator
    def __allNT_clicked(self, litter):
        for idx, nt_radio in enumerate(self.nt_RadioList):
            if idx != len(self.pass_RadioList)-1:
                self.nextImg_bool = False
            else:
                self.nextImg_bool = True
            nt_radio.click()
        try:
            self.qbuttons[self.idx+1].click()
        except KeyError:
            pass

    @AutomationFunctionDecorator
    def __allNA_clicked(self, litter):
        for idx, na_Radio in enumerate(self.na_RadioList):
            if idx != len(self.pass_RadioList)-1:
                self.nextImg_bool = False
            else:
                self.nextImg_bool = True
            na_Radio.click()
        try:
            self.qbuttons[self.idx+1].click()
        except KeyError:
            pass

    @AutomationFunctionDecorator
    def __allNull_clicked(self, litter):
        for idx, nl_radio in enumerate(self.nl_RadioList):
            if idx != len(self.pass_RadioList)-1:
                self.nextImg_bool = False
            else:
                self.nextImg_bool = True
            nl_radio.click()
        try:
            self.qbuttons[self.idx+1].click()
        except KeyError:
            pass

    @AutomationFunctionDecorator
    def set_testList_hboxLayout(self):
        self.pass_RadioList.clear()
        self.fail_RadioList.clear()
        self.nt_RadioList.clear()
        self.na_RadioList.clear()
        self.nl_RadioList.clear()
        self.all_RadioList.clear()
        
        testList_groupbox = QGroupBox("평가 목록")
        testList_groupbox.setFixedHeight(self.bottom_groupbox_fixedHeight)
        
        testList_groupbox_scrollArea = QScrollArea()
        testList_groupbox_widget = QWidget()
        self.testList_groupbox_layout = QHBoxLayout()
        self.testList_hboxLayout = QHBoxLayout(testList_groupbox)
        self.testList_hboxLayout.addWidget(testList_groupbox_scrollArea)

        for i,val in enumerate(self.testList):
            val = str(val)
            globals()[f'testList_groupbox_{i}'] = QGroupBox(val)

            testList_vboxLayout = QVBoxLayout()

            globals()[f'gb{i}_pass'] = QRadioButton("PASS")
            globals()[f'gb{i}_fail'] = QRadioButton("FAIL")
            globals()[f'gb{i}_nt'] = QRadioButton("N/T")
            globals()[f'gb{i}_na'] = QRadioButton("N/A")
            globals()[f'gb{i}_nl'] = QRadioButton("NULL")
            
            self.pass_RadioList.append(globals()[f'gb{i}_pass'])
            self.fail_RadioList.append(globals()[f'gb{i}_fail'])
            self.nt_RadioList.append(globals()[f'gb{i}_nt'])
            self.na_RadioList.append(globals()[f'gb{i}_na'])
            self.nl_RadioList.append(globals()[f'gb{i}_nl'])
            self.all_RadioList = self.pass_RadioList + self.fail_RadioList\
                                + self.nt_RadioList + self.na_RadioList + self.nl_RadioList

            # 평가 목록 그룹 자녀 생성
            testList_vboxLayout.addWidget(globals()[f'gb{i}_pass'])
            testList_vboxLayout.addWidget(globals()[f'gb{i}_fail'])
            testList_vboxLayout.addWidget(globals()[f'gb{i}_nt'])
            testList_vboxLayout.addWidget(globals()[f'gb{i}_na'])
            testList_vboxLayout.addWidget(globals()[f'gb{i}_nl'])
            
            if self.imgList == []:
                globals()[f'gb{i}_pass'].setEnabled(False)
                globals()[f'gb{i}_fail'].setEnabled(False)
                globals()[f'gb{i}_nt'].setEnabled(False)
                globals()[f'gb{i}_na'].setEnabled(False)
                globals()[f'gb{i}_nl'].setEnabled(False)

            try:
                if self.result[self.idx][val] == 'PASS':
                    globals()[f'gb{i}_pass'].setChecked(True)
                elif self.result[self.idx][val] == 'FAIL':
                    globals()[f'gb{i}_fail'].setChecked(True)
                elif self.result[self.idx][val] == 'N/T':
                    globals()[f'gb{i}_nt'].setChecked(True)
                elif self.result[self.idx][val] == 'N/A':
                    globals()[f'gb{i}_na'].setChecked(True)
                else:
                    globals()[f'gb{i}_nl'].setChecked(True)
            except KeyError:
                globals()[f'gb{i}_nl'].setChecked(True)

            globals()[f'testList_groupbox_{i}'].setLayout(testList_vboxLayout)

            self.testList_groupbox_layout.addWidget(globals()[f'testList_groupbox_{i}'])
            
        testList_groupbox_widget.setLayout(self.testList_groupbox_layout)
        testList_groupbox_scrollArea.setWidget(testList_groupbox_widget)
        self.bottom_gridLayout.addWidget(testList_groupbox, 0, 0, 1, 4)

    def qbutton_clicked(self, idx, button, litter):

        def set_color():            
            clear_result_color = "background-color:rgb(225, 225, 225);"
                
            result_color = "background-color:#cc79a7;"       # 보라색

            self.qbuttons[self.pre_idx].setStyleSheet(clear_result_color)
            LogManager.HLOG.info(f"이전 버튼 색상 초기화:rgb(225, 225, 225)")
            button.setStyleSheet(result_color)    
            LogManager.HLOG.info(f"현재 버튼 색상: 보라색,#cc79a7")

            if self.pre_idx != self.idx:
                result_count = {
                    'pre_idx':[],
                    'idx':[]
                }
                # 이전 버튼에 대한 색상 처리
                for testListName in self.testList:
                    result_count['pre_idx'].append(self.result[self.pre_idx][testListName])
                    result_count['idx'].append(self.result[self.idx][testListName])
                LogManager.HLOG.info(f"색상처리를 위한 변수 result_count:{result_count}, pre_idx:{self.pre_idx}, idx:{self.idx}")

                if len(self.testList) == result_count['pre_idx'].count('PASS'):
                    self.qbuttons[self.pre_idx].setStyleSheet("background-color: #0072b2") # 블루

                elif len(self.testList) == result_count['pre_idx'].count('FAIL'):
                    self.qbuttons[self.pre_idx].setStyleSheet("background-color: rgb(211,44,98);") # 레드

                elif len(self.testList) == result_count['pre_idx'].count('N/A'):
                    self.qbuttons[self.pre_idx].setStyleSheet("background-color: #e69f00") # 오렌지

                elif len(self.testList) == result_count['pre_idx'].count('N/T'):
                    self.qbuttons[self.pre_idx].setStyleSheet("background-color: #009e73") # 민트

                elif (result_count['pre_idx'].count("PASS") > 0 or result_count['pre_idx'].count('FAIL') > 0 or\
                        result_count['pre_idx'].count('N/A') > 0 or result_count['pre_idx'].count('N/T') > 0) and result_count['pre_idx'].count('') == 0:
                    self.qbuttons[self.pre_idx].setStyleSheet("background-color: #f0e442") # 노랑
                
                else:
                    self.qbuttons[self.pre_idx].setStyleSheet("") # 초기화

                LogManager.HLOG.info("이전 버튼에 대한 색상 처리 완료")

        self.idx = idx
        self.button = button
        
        self.set_left_right_button_state()

        self.statusbar_label.setText(self.clicked_lang + " - " + self.imgList[idx])
        LogManager.HLOG.info(f"statusbar에 이미지명 표시{self.imgList[idx]}")

        self.img_dir = self.langPath + '\\' + self.imgList[idx]
        self.pixmap = QPixmap(self.img_dir)
        self.img = Image.open(self.img_dir)

        self.resize_right_img()
        LogManager.HLOG.info(f"우측에 이미지 표시:{self.img_dir}")

        # 다른 이미지 버튼 누를 때 액션
        if self.pre_idx != idx or self.first_index_in_sql or self.save_result_no:
            refreshed_cnt = Calculator(self)
            refreshed_cnt.start()
            if not self.first_index_in_sql and not self.save_result_no:
                # self.result에 값 저장하고 기존 데이타 삭제하기
                result_data = self.insert_result(option=True)
                self.result[self.pre_idx] = result_data
                LogManager.HLOG.info(f"다른 이미지 클릭으로 이전 이미지 결과 저장함, self.result:{self.result}")
            
            # self.result에 기존 평가 data로 세팅
            for i,data in enumerate(self.testList):
                if self.result[idx][data] == 'PASS':
                    globals()[f'gb{i}_pass'].setChecked(True)
                elif self.result[idx][data] == 'FAIL':
                    globals()[f'gb{i}_fail'].setChecked(True)
                elif self.result[idx][data] == 'N/T':
                    globals()[f'gb{i}_nt'].setChecked(True)
                elif self.result[idx][data] == 'N/A':
                    globals()[f'gb{i}_na'].setChecked(True)
                else:
                    globals()[f'gb{i}_nl'].setChecked(True)

            for i,data in enumerate(self.fieldList):
                globals()[f'desc_LineEdit{i}'].setText(self.result[idx][data])

            self.first_index_in_sql = False
            self.save_result_no = False

        set_color()
        self.pre_idx = idx

    def insert_result(self, option=None):
        """dict에 평가결과 저장하는 함수

        Args:
            option : True 선택 시 화면에 입력되어 있는 데이터 clear

        Returns:
            result_data: 현재 화면에 입력되어 있는 데이터 반환
        """
        result_data = {}
        try:
            result_data["이미지"] = self.result[self.pre_idx]["이미지"]
        except:
            msg = traceback.format_exc()
            LogManager.HLOG.error(msg)

        for i,val in enumerate(self.testList):
            if globals()[f'gb{i}_pass'].isChecked():
                result_data[val] = "PASS"
            elif globals()[f'gb{i}_fail'].isChecked():
                result_data[val] = "FAIL"
            elif globals()[f'gb{i}_nt'].isChecked():
                result_data[val] = "N/T"
            elif globals()[f'gb{i}_na'].isChecked():
                result_data[val] = "N/A"
            else:
                result_data[val] = ""

            if option is True:
                globals()[f'gb{i}_nl'].setChecked(True)

        for i,field in enumerate(self.fieldList):
            result_data[field] = globals()[f'desc_LineEdit{i}'].text()
            if option is True:
                globals()[f'desc_LineEdit{i}'].clear()

        result_data["버전 정보"] = self.version_textEdit.toPlainText()
        return result_data

    @AutomationFunctionDecorator
    def double_click_img(self, img_dir, e):
        self.viewer = ImageViewer(img_dir)
        self.viewer.show()
        LogManager.HLOG.info(f"이미지 더블클릭:{img_dir}")

    @AutomationFunctionDecorator
    def show_imgList(self, lang, langPath, subMenu="", litter=None):
        """좌측에 표출할 이미지버튼들을 세팅할 함수

        Args:
            lang : 현재 선택된 언어
        """
        
        if lang != self.pre_lang and langPath != self.pre_langPath:
            if self.check_result() and self.pre_lang != "":
                reply = QMessageBox.question(self, '알림', '평가결과가 저장되지 않았습니다.\n평가결과를 저장하시겠습니까?',
                                    QMessageBox.Ok | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Ok)
                if reply == QMessageBox.Ok:
                    self.save_result()
                elif reply == QMessageBox.No:
                    self.save_result_no = True
                else:
                    subMenu.setChecked(False)
                    return

            try:
                self.imgList = [fn for fn in os.listdir(langPath)
                        if (fn.endswith('.png') or fn.endswith('.jpg'))]
            except FileNotFoundError:
                QMessageBox.warning(self, "주의", "존재하지 않는 경로입니다.\n경로를 다시 설정해 주세요.")
                self.show_setup_Language()
                subMenu.setChecked(False)
                return

            if self.imgList == []:
                QMessageBox.warning(self, "주의", "선택하신 경로에 이미지 파일이 없습니다.")
                subMenu.setChecked(False)
                self.imgList = self.pre_imgList
            else:
                self.pre_idx = 0                         # 이전 이미지 버튼 index
                self.clicked_lang = lang
                if self.check_sql_result():
                    reply = QMessageBox.question(self, '알림', f'"{self.clicked_lang}"에 이전에 평가한 결과가 있습니다.\n결과 같이 불러오시겠습니까?',
                                    QMessageBox.Ok | QMessageBox.No, QMessageBox.Ok)
                    if reply == QMessageBox.Ok:
                        # self.db.c.execute(f"SELECT * FROM '{self.clicked_lang}'")
                        # sql_all = self.db.c.fetchall()
                        sql_all = db.db_select(f"SELECT * FROM '{self.clicked_lang}'")
                        sql_img = [str(file[0]) for file in sql_all]

                self.actionSave.setEnabled(True)
                if self.pre_subMenu is not None:
                    self.pre_subMenu.setChecked(False)
                subMenu.setChecked(True)

                self.loadingScreen = LoadingScreen(self)
                self.startLoading()

                # 평가결과 기록 삭제
                self.result.clear()
                self.setupList = self.testList + self.fieldList

                # 이미지 리스트 초기화
                for i in range(self.img_VBoxLayout.count()):
                    self.img_VBoxLayout.itemAt(i).widget().deleteLater()

                # 선택한 언어 기억
                self.langPath = langPath
                LogManager.HLOG.info(f"이미지 리스트 불러옴, 선택된 언어:{lang}, 경로:{langPath}")

                # 이미지 버튼 추가
                self.qbuttons = {}
                self.icons = {}
                all_cnt = 0
                all_percent = 0
                pass_cnt = 0
                fail_cnt = 0
                na_cnt = 0
                nt_cnt = 0
                other_cnt = 0
                null_cnt = 0

                for index, filename in enumerate(self.imgList):
                    sql_testList = []
                    # 평가결과를 저장할 dictionary: self.result 세팅
                    self.result[index] = {}
                    self.result[index]['이미지'] = langPath + '\\' + filename

                    try:
                        i = sql_img.index(self.result[index]['이미지'])
                        self.first_index_in_sql = True
                        for j, setupListName in enumerate(self.setupList):
                            self.result[index][setupListName] = sql_all[i][j+1]
                            if setupListName in self.testList:
                                sql_testList.append(sql_all[i][j+1])

                        self.result[index]['버전 정보'] = sql_all[i][-1]

                    except:
                        for setupListName in self.setupList:
                            self.result[index][setupListName] = ""
                        self.result[index]['버전 정보'] = ""

                    pixmap = QPixmap(langPath + '\\' + filename)
                    pixmap = pixmap.scaled(40, 40, Qt.IgnoreAspectRatio)
                    icon = QIcon()
                    icon.addPixmap(pixmap)
                    self.icons[index] = icon
                    
                    button = QPushButtonIcon()
                    button.setIcon(icon)
                    button.setToolTip(str(index+1))
                    
                    if len(self.testList) == sql_testList.count("PASS"):
                        button.setStyleSheet("background-color: #0072b2") # 블루
                        pass_cnt = int(self.pass_lbl_cnt.text().replace("건", "")) + 1

                    elif len(self.testList) == sql_testList.count('FAIL'):
                        button.setStyleSheet("background-color: rgb(211,44,98);") # 레드
                        fail_cnt = int(self.fail_lbl_cnt.text().replace("건", "")) + 1

                    elif len(self.testList) == sql_testList.count('N/A'):
                        button.setStyleSheet("background-color: #e69f00") # 그레이
                        na_cnt = int(self.na_lbl_cnt.text().replace("건", "")) + 1

                    elif len(self.testList) == sql_testList.count('N/T'):
                        button.setStyleSheet("background-color: #009e73") # 민트
                        nt_cnt = int(self.nt_lbl_cnt.text().replace("건", "")) + 1

                    elif (sql_testList.count('PASS') > 0 or sql_testList.count('FAIL') > 0 \
                        or sql_testList.count('N/T') > 0 or sql_testList.count('N/A') > 0) and sql_testList.count('') == 0:
                        button.setStyleSheet("background-color: #f0e442") # 노랑 
                        other_cnt = int(self.other_lbl_cnt.text().replace("건", "")) + 1

                    button.clicked.connect(partial(self.qbutton_clicked, index, button))
                            
                    self.img_VBoxLayout.addWidget(button)
                    self.qbuttons[index] = button
                    QApplication.processEvents()
                    
                # 필드 재설정
                for i in range(self.field_gridLayout.count()):
                    self.field_gridLayout.itemAt(i).widget().deleteLater()
                self.set_field_gridLayout()
                
                # 평가결과 재설정
                for i in range(self.testList_groupbox_layout.count()):
                    self.testList_groupbox_layout.itemAt(i).widget().deleteLater()
                self.set_testList_hboxLayout()
                
                self.pass_lbl_cnt.setText(f"{str(pass_cnt)}건")
                self.fail_lbl_cnt.setText(f"{str(fail_cnt)}건")
                self.na_lbl_cnt.setText(f"{str(na_cnt)}건")
                self.nt_lbl_cnt.setText(f"{str(nt_cnt)}건")
                self.other_lbl_cnt.setText(f"{str(other_cnt)}건")
                null_cnt = len(self.imgList) - pass_cnt - fail_cnt - na_cnt - nt_cnt - other_cnt
                self.null_lbl_cnt.setText(f"{str(null_cnt)}건")
                all_cnt = len(self.imgList)
                all_percent = round((all_cnt - null_cnt) / all_cnt * 100, 1)
                self.all_lbl_cnt.setText(f"{str(all_cnt)}건/{str(all_percent)}%")

                LogManager.HLOG.info(f"self.result:{self.result}")
                # self.setEnabled(True)
                self.stopLoading()
                self.qbuttons[0].click()
                if len(self.imgList) > 1:
                    self.right_imgBtn.setEnabled(True)
                LogManager.HLOG.info(f"이미지 불러온 후 첫번째 버튼 클릭")
                
                self.setEnabled_bottom()

                self.pre_lang = lang
                self.pre_langPath = langPath
                self.pre_subMenu = subMenu
                self.pre_imgList = self.imgList

        else:
            subMenu.setChecked(True)

    def startLoading(self):
        self.setEnabled(False)
        self.loadingScreen.startAnimation()

    def stopLoading(self):
        self.setEnabled(True)
        self.loadingScreen.stopAnimation()
            
    def setEnabled_bottom(self):
        for field in self.field_lineEdit:
            field.setEnabled(True)
        for radio_button in self.all_RadioList:
            radio_button.setEnabled(True)

        self.allPass_RadioButton.setEnabled(True)
        self.allFail_RadioButton.setEnabled(True)
        self.allNT_RadioButton.setEnabled(True)
        self.allNA_RadioButton.setEnabled(True)
        self.allNull_RadioButton.setEnabled(True)
        self.version_textEdit.setEnabled(True)
            
    @AutomationFunctionDecorator
    def set_field_gridLayout(self):
        self.field_lineEdit.clear()

        for i,field in enumerate(self.fieldList):
            globals()[f'field_Label{i}'] = QLabel(field)
            globals()[f'desc_LineEdit{i}'] = QLineEdit()

            try:
                if field in self.result[self.idx].keys():
                    globals()[f'desc_LineEdit{i}'].setText(self.result[self.idx][field])
            except:
                pass
            
            if len(self.fieldList) == 4:
                if i < 2:
                    self.field_gridLayout.addWidget(globals()[f'field_Label{i}'], 0,i*2)
                    self.field_gridLayout.addWidget(globals()[f'desc_LineEdit{i}'], 0,i*2+1)
                else:
                    self.field_gridLayout.addWidget(globals()[f'field_Label{i}'], 1,(i-2)*2)
                    self.field_gridLayout.addWidget(globals()[f'desc_LineEdit{i}'], 1,(i-2)*2+1)
            else:
                if i < 3:
                    self.field_gridLayout.addWidget(globals()[f'field_Label{i}'], 0,i*2)
                    self.field_gridLayout.addWidget(globals()[f'desc_LineEdit{i}'], 0,i*2+1)
                else:
                    self.field_gridLayout.addWidget(globals()[f'field_Label{i}'], 1,(i-3)*2)
                    self.field_gridLayout.addWidget(globals()[f'desc_LineEdit{i}'], 1,(i-3)*2+1)
            
            self.field_lineEdit.append(globals()[f'desc_LineEdit{i}'])

            if self.imgList == []:
                globals()[f'desc_LineEdit{i}'].setEnabled(False)
            
    @AutomationFunctionDecorator
    def btn_onClicked(self, litter):
        btn = self.sender()
        if btn.text() == ">":
            self.qbuttons[self.idx+1].click()
        elif btn.text() == "<":
            self.qbuttons[self.idx-1].click()
        
    def set_left_right_button_state(self):
        """좌우 버튼 활성화/비활성화 함수
        """
        if self.idx == 0:
            self.left_imgBtn.setEnabled(False)
        elif self.idx == len(self.imgList) - 1:
            self.right_imgBtn.setEnabled(False)
        else:
            self.left_imgBtn.setEnabled(True)
            self.right_imgBtn.setEnabled(True)
            
    def resizeEvent(self, event):
        """창 크기가 변경될 때 이미지 사이즈도 변경됨
           try: 처음엔 이미지가 없는 경우 pass

        Args:
            event (_type_): _description_
        """
        try:
            self.resize_right_img()
        except:
            pass
        
    def resize_right_img(self):
        """우측 이미지 사이즈 변경 함수
        """
        if self.img.width < self.img_Label.width() and self.img.height < self.img_Label.height():
            pass
        elif self.img.width/self.img.height < self.img_Label.width()/self.img_Label.height():
            self.pixmap = self.pixmap.scaledToHeight(self.img_Label.height())
        else:
            self.pixmap = self.pixmap.scaledToWidth(self.img_Label.width())

        self.img_Label.setPixmap(QPixmap(self.pixmap))
        self.img_Label.setAlignment(Qt.AlignCenter)
        self.img_Label.mouseDoubleClickEvent = partial(self.double_click_img, self.img_dir)

    def save_result(self):
        """
        결과값을 DB에 저장
        """
        # # self.loadingScreen = LoadingScreen(self)
        # # self.loadingScreen.startAnimation()
        # 현재 이미지에 대한 결과 저장
        result_data = self.insert_result()
        self.result[self.idx] = result_data

        self.startLoading()
        
        # SQLite에 현재 언어 table이 있으면 삭제
        # self.db = db.DBManager()
        # self.db.c.execute("SELECT name FROM sqlite_master WHERE type='table';")
        # sql_tables = self.db.c.fetchall()
        sql_tables = db.db_select("SELECT name FROM sqlite_master WHERE type='table';")
        sql_tables_list = [table[0] for table in sql_tables]
        if self.clicked_lang in sql_tables_list:
            # self.db.c.execute(f"DROP TABLE '{self.clicked_lang}'")
            db.db_edit(f"DROP TABLE '{self.clicked_lang}'")
        LogManager.HLOG.info(f"{self.clicked_lang} 테이블 삭제")

        self.setupList = self.testList + self.fieldList

        query = f"CREATE TABLE IF NOT EXISTS '{self.clicked_lang}' ('이미지' TEXT,"
        for i, col in enumerate(self.setupList):
            query += f"'{col}' TEXT,"
        query += "'버전정보' TEXT)"
        LogManager.HLOG.info(f"평가결과 저장 query:{query}")
        
        # self.db.c.execute(query)
        db.db_edit(query)

        question_marks = ", ".join(['?' for _ in range(len(result_data.keys()))])
        LogManager.HLOG.info(f"저장할 평가결과:{self.result}")
        
        for val in self.result.values():
            try:
                # self.db.dbConn.execute(f"INSERT INTO '{self.clicked_lang}' VALUES ({question_marks})", 
                #         (tuple(val.values())))
                # self.db.dbConn.commit()
                db.db_insert(f"INSERT INTO '{self.clicked_lang}' VALUES ({question_marks})", 
                        (tuple(val.values())))
                QApplication.processEvents()
            except RuntimeError:
                continue
        refreshed_cnt = Calculator(self)
        refreshed_cnt.start()
        self.stopLoading()

    @AutomationFunctionDecorator
    def closeEvent(self, e) -> None:
        if self.imgList != []:
            result_data = self.insert_result()
            self.result[self.idx] = result_data

            if self.check_result():
                reply = QMessageBox.question(self, '알림', '평가결과가 저장되지 않았습니다.\n평가결과를 저장하시겠습니까?',
                                        QMessageBox.Ok | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Ok)
                if reply == QMessageBox.Ok:
                    self.save_result()
                    e.accept()
                elif reply == QMessageBox.No:
                    e.accept()
                else:
                    e.ignore()
        
    def check_result(self):
        if self.result != {}:
            result_data = self.insert_result()
            self.result[self.idx] = result_data
        try:
            # self.db = DBManager()
            # self.db.c.execute(f"SELECT * FROM '{self.clicked_lang}'")
            # sql_result = self.db.c.fetchall()
            sql_result = db.db_select(f"SELECT * FROM '{self.clicked_lang}'")
        except:
            sql_result = []
        result_list = []
        
        for vals in self.result.values():
            result = []
            for val in vals.values():
                result.append(val)
            result_list.append(tuple(result))

        if sql_result != result_list:
            return True
        else:
            return False
        
    def check_sql_result(self):
        try:
            # self.db.c.execute(f"SELECT * FROM '{self.clicked_lang}'")
            db.db_select(f"SELECT * FROM '{self.clicked_lang}'")
            return True
        except:
            return False
                
class QPushButtonIcon(QPushButton):
    
    def __init__(self, parent = None):
        super().__init__(parent)
        self.setIconSize(QSize(40, 40))

class LoadingScreen(QWidget):
    
    def __init__(self, parent):
        super().__init__(parent)    
        ph = self.parent().geometry().height()
        pw = self.parent().geometry().width()
        self.setFixedSize(pw, ph) 
        size = self.size()
        self.move(int(pw/2 - size.width()/2), int(ph/2 - size.height()/2))
        # self.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.CustomizeWindowHint)
        self.setWindowFlags(Qt.FramelessWindowHint)

        self.label_animation = QLabel(self)
        self.label_animation.resize(pw, ph)
        self.movie = QMovie('./IMG_Source/loading1.gif')
        self.label_animation.setMovie(self.movie)
        self.label_animation.setAlignment(Qt.AlignCenter)

    def startAnimation(self):
        opacity_effect = QGraphicsOpacityEffect(self)
        opacity_effect.setOpacity(0.1)
        self.movie.start()
        self.show()

    def stopAnimation(self):
        self.movie.stop()
        self.close()
    
class Calculator(QThread):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.result = parent.result
        self.testList = parent.testList
        self.imgList = parent.imgList
        self.pass_lbl_cnt = parent.pass_lbl_cnt
        self.fail_lbl_cnt = parent.fail_lbl_cnt
        self.na_lbl_cnt = parent.na_lbl_cnt
        self.nt_lbl_cnt = parent.nt_lbl_cnt
        self.other_lbl_cnt = parent.other_lbl_cnt
        self.null_lbl_cnt = parent.null_lbl_cnt
        self.all_lbl_cnt = parent.all_lbl_cnt

    def run(self):
        all_cnt = 0
        all_percent = 0
        pass_cnt = 0
        fail_cnt = 0
        nt_cnt = 0
        na_cnt = 0
        other_cnt = 0
        for val in self.result.values():
            cnt_result = []
            for key in val.keys():
                if key in self.testList:
                    cnt_result.append(val[key])

            if len(self.testList) == cnt_result.count("PASS"):
                pass_cnt += 1
            elif len(self.testList) == cnt_result.count('FAIL'):
                fail_cnt += 1
            elif len(self.testList) == cnt_result.count('N/A'):
                na_cnt += 1
            elif len(self.testList) == cnt_result.count('N/T'):
                nt_cnt += 1
            elif (cnt_result.count("PASS") > 0 or cnt_result.count('FAIL') > 0 or\
                cnt_result.count('N/A') > 0 or cnt_result.count('N/T') > 0) and cnt_result.count('') == 0:
                other_cnt += 1
        
        self.pass_lbl_cnt.setText(f"{str(pass_cnt)}건")
        self.fail_lbl_cnt.setText(f"{str(fail_cnt)}건")
        self.na_lbl_cnt.setText(f"{str(na_cnt)}건")
        self.nt_lbl_cnt.setText(f"{str(nt_cnt)}건")
        self.other_lbl_cnt.setText(f"{str(other_cnt)}건")
        null_cnt = len(self.imgList) - pass_cnt - fail_cnt - na_cnt - nt_cnt - other_cnt
        self.null_lbl_cnt.setText(f"{str(null_cnt)}건")
        all_cnt = len(self.imgList)
        all_percent = round((all_cnt - null_cnt) / all_cnt * 100, 1)
        self.all_lbl_cnt.setText(f"{str(all_cnt)}건/{str(all_percent)}%")

def Init():
    LogManager.Init()

class SplashPanel(QSplashScreen):
    def __init__(self):
        super(SplashPanel, self).__init__()
        message_font = QFont()
        message_font.setBold(True)
        message_font.setPointSize(14)
        self.setFont(message_font)
        pixmap = QPixmap("./IMG_Source/modim.png")
        # pixmap = QPixmap("D:\\github\\bdmaster\\app\\resource\\images\\timg.png")
        self.setPixmap(pixmap)
        # self.showMessage('正在加载文件资源', alignment=Qt.AlignBottom, color=Qt.black)
        self.show()
        # for i in range(1, 5):
        #     self.showMessage('잠시만 기다려 주세요{}'.format('.' * i), alignment=Qt.AlignBottom, color=Qt.black)
        #     time.sleep(0.15)
    def mousePressEvent(self, evt):
        pass
        # 重写鼠标点击事件，阻止点击后消失
    def mouseDoubleClickEvent(self, *args, **kwargs):
        pass
        # 重写鼠标移动事件，阻止出现卡顿现象
    def enterEvent(self, *args, **kwargs):
        pass
        # 重写鼠标移动事件，阻止出现卡顿现象
    def mouseMoveEvent(self, *args, **kwargs):
        pass
        # 重写鼠标移动事件，阻止出现卡顿现象

if __name__ == "__main__":
    Init()
    app = QApplication(sys.argv)
    splash = SplashPanel()
    app.setWindowIcon(QIcon("./IMG_Source/modim.png"))
    ui = MainWindow()
    ui.show()
    splash.finish(ui)
    splash.deleteLater()
    sys.exit(app.exec_())
